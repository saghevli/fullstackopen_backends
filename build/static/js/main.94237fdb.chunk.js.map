{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","newObject","axios","post","then","response","data","id","put","delete","Filter","newFilter","handleFilterChange","value","onChange","PersonForm","addName","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","type","Persons","persons","deletePersonHandler","style","filter","person","name","toLowerCase","includes","map","index","key","number","onClick","Notification","notification","message","className","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","notificationData","setNotificationData","useEffect","get","event","console","log","target","preventDefault","foundIndex","findIndex","window","confirm","personService","returnedPerson","setTimeout","concat","x","i","catch","error","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.94237fdb.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }","import axios from 'axios'\nimport React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport './index.css'\n\nconst Filter = ({newFilter, handleFilterChange}) => (\n  <div>\n    filter shown with<input\n      value={newFilter}\n      onChange={handleFilterChange} \n    />\n  </div>\n)\n\nconst PersonForm = ({addName, newName, newNumber, handleNameChange, handleNumberChange}) => (\n  <form onSubmit={addName}>\n    <div>\n      name: \n      <input \n        value={newName}\n        onChange={handleNameChange}\n      />\n      <br></br>\n      number: \n      <input \n        value={newNumber}\n        onChange={handleNumberChange}\n      />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n)\n\nconst Persons = ({persons, newFilter, deletePersonHandler, style}) => {\n  return (\n    <div>\n      {persons\n        .filter(person => person.name.toLowerCase().includes(newFilter.toLowerCase()))\n        .map((person, index) => \n          <p key={index}>\n            {person.name} {person.number}\n            <button onClick={() => deletePersonHandler(index, style)}>delete</button>\n          </p>)}\n    </div>\n)}\n\nconst Notification = ({notification}) => {\n  if (notification.message === null) {\n    return null\n  }\n  return (\n    <div className={notification.type}>\n      {notification.message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([]) \n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n  const [notificationData, setNotificationData] = useState({message: null, type: null})\n  useEffect(() => {\n    axios\n      .get('/api/persons')\n      .then(response => {\n        setPersons(response.data)\n    })\n  }, [])\n\n  const addName = (event) => {\n    event.preventDefault()\n    const foundIndex = persons.findIndex(person => person.name === newName)\n    if (foundIndex === -1) {\n      personService\n        .create({name: newName, number:newNumber})\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n          setNotificationData({message:`Added ${returnedPerson.name}`, type:'confirm'})\n          setTimeout(() => setNotificationData({...notificationData, message: null}), 4000)\n        })\n        return\n    }\n    if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n      personService\n        .update(persons[foundIndex].id, {name: newName, number:newNumber})\n        .then(returnedPerson => {\n          setPersons([...persons].map(person => (\n            person.name === newName ?\n              {...person, number: newNumber} :\n              person)))\n          setNewName('')\n          setNewNumber('')\n          setNotificationData({message:`Modified ${returnedPerson.name}`, type:'confirm'})\n          setTimeout(() => setNotificationData({...notificationData, message:null}), 4000)\n        })\n    }\n  }\n\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log(event.target.value)\n    setNewFilter(event.target.value)\n  }\n\n  const deletePersonHandler = (index) => {\n    if(window.confirm(`Delete ${persons[index].name}?`)) {\n      personService\n        .remove(persons[index].id)\n        .then(x => {\n          setPersons(persons.filter((person, i) => index !== i))\n        })\n        .catch(error => {\n          setNotificationData({message:`Information of ${persons[index].name} has already been removed from the server`, type:'error'})\n          setPersons(persons.filter((person, i) => index !== i))\n          setTimeout(() => setNotificationData({...notificationData, message:null}), 4000)\n        })\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notificationData} />\n      <Filter newFilter={newFilter} handleFilterChange={handleFilterChange} />\n      <h3>add a new</h3>\n      <PersonForm addName={addName} newName={newName} newNumber={newNumber} handleNameChange={handleNameChange} handleNumberChange={handleNumberChange} />\n      <h3>Numbers</h3>\n      <Persons persons={persons} newFilter={newFilter} deletePersonHandler={deletePersonHandler} />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}